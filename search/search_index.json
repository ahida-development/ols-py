{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ols-py","text":"<p>Documentation: https://ahida-development.github.io/ols-py</p> <p>Source Code: https://github.com/ahida-development/ols-py</p> <p>PyPI: https://pypi.org/project/ols-py/</p> <p>Python client for the Ontology Lookup Service</p> <p>Current status:</p> <ul> <li>Now that OLS4 is released and OLS3 is no longer updated, this client will only   support OLS4 going forward</li> <li>Some API endpoints may not be implemented, or schemas not fully described -   please open an issue if   you want anything added.</li> </ul> <p>Features:</p> <ul> <li>Type annotated so you know which parameters can be used for each endpoint</li> <li>Responses validated and parsed with pydantic for   easy access to response data</li> </ul>"},{"location":"#example-usage","title":"Example usage","text":"<pre><code>from ols_py.client import Ols4Client\nclient = Ols4Client()\nresp = client.search(\"MC1R\", params={\"ontology\": \"go\"})\nterm = resp.response.docs[0]\nprint(term)\n# SearchResultItem(\n#   id=None, annotations=None, annotations_trimmed=None,\n#   description=['A rhodopsin-like G-protein ... gamma-melanocyte-stimulating hormone.'],\n#   iri='http://purl.obolibrary.org/obo/PR_000001146', label='melanocortin receptor',\n#   obo_id='PR:000001146', ontology_name='go', ontology_prefix='GO', subset=None,\n#   short_form='PR_000001146', synonyms=None, type='class'\n#)\nprint(term.iri)\n# http://purl.obolibrary.org/obo/PR_000001146\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install ols-py\n</code></pre>"},{"location":"#development","title":"Development","text":"<ul> <li>Clone this repository</li> <li>Requirements:</li> <li>Poetry</li> <li>Python 3.10+</li> <li>Create a virtual environment and install the dependencies</li> </ul> <pre><code>poetry install\n</code></pre> <ul> <li>Activate the virtual environment</li> </ul> <pre><code>poetry shell\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<pre><code>pytest\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation is automatically generated from the content of the docs directory and from the docstrings  of the public signatures of the source code. The documentation is updated and published as a Github project page   automatically as part each release.</p>"},{"location":"#releasing","title":"Releasing","text":"<p>Trigger the Draft release workflow (press Run workflow). This will update the changelog &amp; version and create a GitHub release which is in Draft state.</p> <p>Find the draft release from the GitHub releases and publish it. When  a release is published, it'll trigger release workflow which creates PyPI  release and deploys updated documentation.</p>"},{"location":"#pre-commit","title":"Pre-commit","text":"<p>Pre-commit hooks run all the auto-formatters (e.g. <code>black</code>, <code>isort</code>), linters (e.g. <code>mypy</code>, <code>flake8</code>), and other quality  checks to make sure the changeset is in good shape before a commit/push happens.</p> <p>You can install the hooks with (runs for each commit):</p> <pre><code>pre-commit install\n</code></pre> <p>Or if you want them to run only for each push:</p> <pre><code>pre-commit install -t pre-push\n</code></pre> <p>Or if you want e.g. want to run all checks manually for all files:</p> <pre><code>pre-commit run --all-files\n</code></pre> <p>This project was generated using the wolt-python-package-cookiecutter template.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#110-2024-06-04","title":"1.1.0 - 2024-06-04","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Added <code>page</code> and <code>size</code> params to <code>get_term_parents</code>, <code>get_term_children</code>, and other methods   for accessing term relatives</li> </ul>"},{"location":"changelog/#100-2023-12-11","title":"1.0.0 - 2023-12-11","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>1.0 release!</li> </ul>"},{"location":"changelog/#099-2023-12-11","title":"0.9.9 - 2023-12-11","text":""},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Updated to use OLS4 everywhere - OLS4 is the only version   being actively updated now</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li><code>OlsClient</code>. This package will only support OLS4, going forward</li> </ul>"},{"location":"changelog/#061-2023-10-13","title":"0.6.1 - 2023-10-13","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Improvements to docs only</li> </ul>"},{"location":"changelog/#060-2023-10-13","title":"0.6.0 - 2023-10-13","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Unified OLS3 and OLS4 schemas - OLS4 is more in sync with OLS3 now, so separate schemas are no longer needed</li> <li><code>mypy</code> is now happy with our types thanks to the unified schemas! We can keep the code type-checked from now on</li> <li>Implemented more endpoints, e.g. retrieving individuals and properties</li> <li>Reworked function arguments - any optional parameters for requests are now specified with <code>TypedDict</code>, rather than a PyDantic object - this is more user-friendly</li> </ul>"},{"location":"changelog/#051-2023-09-14","title":"0.5.1 - 2023-09-14","text":""},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Added types/schemas for <code>obo_synonym</code> and <code>obo_xref</code> on Term responses</li> </ul>"},{"location":"changelog/#050-2023-07-27","title":"0.5.0 - 2023-07-27","text":""},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Updated to Pydantic V2: the new version has useful features such as multiple aliases for fields</li> <li>In Pydantic V2, url fields are stored as a URL class and cannot be directly used as strings - use <code>str(model.url_field)</code> to use them as string.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Updated some schema fields to reflect latest changes to OLS4 - still a bit of a moving target!</li> </ul>"},{"location":"changelog/#030-2023-06-05","title":"0.3.0 - 2023-06-05","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Experimental support for OLS4 instances (using the current   API). OLS4 should support the same API, but currently a few responses seem   to have a different structure, so start implementing and testing against it.</li> </ul> <p>To use the OLS4 instance, import <code>Ols4Client</code> from <code>ols_py.ols4_client</code></p>"},{"location":"changelog/#027-2023-05-25","title":"0.2.7 - 2023-05-25","text":""},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li>Allow arbitrary annotations in search queryFields</li> </ul>"},{"location":"changelog/#026-2023-05-17","title":"0.2.6 - 2023-05-17","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li><code>get_term_hierarchical_parents()</code> method</li> </ul>"},{"location":"changelog/#025-2022-11-23","title":"0.2.5 - 2022-11-23","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li><code>OlsClient.get_terms()</code> endpoint for multiple terms/lookup by OBO ID</li> <li><code>instances</code> module with URLs for known instances</li> </ul>"},{"location":"changelog/#024-2022-11-07","title":"0.2.4 - 2022-11-07","text":""},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Add \"subset\" to search query fields</li> </ul>"},{"location":"changelog/#023-2022-10-20","title":"0.2.3 - 2022-10-20","text":""},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Improvements to schemas for search</li> </ul>"},{"location":"changelog/#022-2022-10-05","title":"0.2.2 - 2022-10-05","text":""},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>Added documentation for schema fields</li> </ul>"},{"location":"changelog/#021-2022-10-05","title":"0.2.1 - 2022-10-05","text":""},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>Reworked documentation</li> </ul>"},{"location":"changelog/#020-2022-10-05","title":"0.2.0 - 2022-10-05","text":""},{"location":"changelog/#changed_12","title":"Changed","text":"<ul> <li>Refactored schemas to better separate schemas used in requests from schemas for responses</li> </ul>"},{"location":"changelog/#015-2022-09-27","title":"0.1.5 - 2022-09-27","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li><code>OlsClient.get_term_in_defining_ontology()</code> method for looking up a term by IRI/ID alone</li> <li>Improvements to tests</li> </ul>"},{"location":"changelog/#014-2022-09-26","title":"0.1.4 - 2022-09-26","text":""},{"location":"changelog/#changed_13","title":"Changed","text":"<ul> <li>Add more fields to <code>Term</code> schema</li> </ul>"},{"location":"changelog/#013-2022-09-23","title":"0.1.3 - 2022-09-23","text":""},{"location":"changelog/#changed_14","title":"Changed","text":"<ul> <li><code>OlsClient</code> is now exported so you can do <code>from ols_py import OlsClient</code></li> <li><code>id</code> is not required in <code>SearchResultItem</code>, update schema</li> </ul>"},{"location":"changelog/#012-2022-09-23","title":"0.1.2 - 2022-09-23","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Add more fields to search schema (e.g. synonym)</li> </ul>"},{"location":"changelog/#011-2022-09-21","title":"0.1.1 - 2022-09-21","text":""},{"location":"changelog/#changed_15","title":"Changed","text":"<ul> <li>Improvements to docs</li> </ul>"},{"location":"changelog/#010-2022-09-21","title":"0.1.0 - 2022-09-21","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li><code>OlsClient.search()</code> for the search endpoint</li> <li><code>OlsClient.get_term_parents()</code>, <code>OlsClient.get_term_children()</code>, ..., for parents/children/ancestors of terms</li> </ul>"},{"location":"changelog/#003-2022-09-19","title":"0.0.3 - 2022-09-19","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Fixed docs by adding <code>mkdocstrings-python</code> dependency</li> </ul>"},{"location":"changelog/#002-2022-09-19","title":"0.0.2 - 2022-09-19","text":""},{"location":"changelog/#changed_16","title":"Changed","text":"<ul> <li>Initial release on PyPI</li> </ul>"},{"location":"client/","title":"OLS4 client","text":""},{"location":"client/#ols_py.client","title":"<code>ols_py.client</code>","text":""},{"location":"client/#ols_py.client.Ols4Client","title":"<code>Ols4Client(base_url: str = EBI_OLS4)</code>","text":"<p>Client for communicating with an OLS instance.</p> <p>Parameters:</p> <ul> <li> <code>base_url</code>               (<code>str</code>, default:                   <code>EBI_OLS4</code> )           \u2013            <p>Base API URL for the OLS instance, up to and including /api/</p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.find_terms","title":"<code>find_terms(params: schemas.requests.GetTermsParams)</code>","text":"<p>Search for terms across ontologies.</p> <p>Provide either <code>iri</code>, <code>short_form</code>, or <code>obo_id</code></p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>GetTermsParams</code>)           \u2013            <p>Request params. You must provide one of <code>iri</code>, <code>short_form</code> or <code>obo_id</code>  Example requests:  curl -L 'http://www.ebi.ac.uk/ols4/api/terms/http%253A%252F%252Fwww.ebi.ac.uk%252Fefo%252FEFO_0000001' -i -H 'Accept: application/json' curl -L 'http://www.ebi.ac.uk/ols4/api/terms?iri=http://www.ebi.ac.uk/efo/EFO_0000001' -i -H 'Accept: application/json' curl -L 'http://www.ebi.ac.uk/ols4/api/terms?short_form=EFO_0000001' -i -H 'Accept: application/json' curl -L 'http://www.ebi.ac.uk/ols4/api/terms?obo_id=EFO:0000001' -i -H 'Accept: application/json' curl -L 'http://www.ebi.ac.uk/ols4/api/terms?id=EFO:0000001' -i -H 'Accept: application/json'</p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.get","title":"<code>get(path: str, params: Optional[ParamsMapping] = None) -&gt; dict</code>","text":"<p>Perform a GET request to the API. Unlike most of the client methods, this just returns the JSON data as a dict, without validation/parsing. Useful if you want to test an API endpoint, or use an endpoint that's not implemented yet.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>API path (excluding base url)</p> </li> <li> <code>params</code>               (<code>Optional[ParamsMapping]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code>           \u2013            <p>JSON data, as a dict</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>HTTPError</code>             \u2013            <p>if response is not OK</p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.get_api_info","title":"<code>get_api_info() -&gt; schemas.responses.ApiInfo</code>","text":"<p>Get the list of endpoints supported by the API</p>"},{"location":"client/#ols_py.client.Ols4Client.get_individual","title":"<code>get_individual(ontology_id: str, iri: str) -&gt; schemas.responses.Term</code>","text":"<p>Get an individual from a specific ontology.</p> <p>Example request:</p> <pre><code>curl -L 'http://www.ebi.ac.uk/ols4/api/ontologies/iao/individuals/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FIAO_0000002' -i -H 'Accept: application/json'\n</code></pre>"},{"location":"client/#ols_py.client.Ols4Client.get_ontologies","title":"<code>get_ontologies(page: Optional[int] = None, size: Optional[int] = None) -&gt; schemas.responses.OntologyList</code>","text":"<p>Get the list of ontologies the OLS instance has.</p> <p>Parameters:</p> <ul> <li> <code>page</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Page number of results (starting at 0)</p> </li> <li> <code>size</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of results per page (API default is 20)</p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.get_ontology","title":"<code>get_ontology(ontology_id: str) -&gt; schemas.responses.OntologyItem</code>","text":"<p>Get details for a single ontology</p> <p>Parameters:</p> <ul> <li> <code>ontology_id</code>               (<code>str</code>)           \u2013            <p>Ontology ID/name, e.g. \"mondo\"</p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.get_property","title":"<code>get_property(ontology_id: str, iri: str) -&gt; schemas.responses.Term</code>","text":"<p>Get a property from a specific ontology.</p> <p>Example request:</p> <pre><code>curl -L 'http://www.ebi.ac.uk/ols4/api/ontologies/efo/properties/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FBFO_0000050' -i -H 'Accept: application/json'\n</code></pre>"},{"location":"client/#ols_py.client.Ols4Client.get_related_term_by_property","title":"<code>get_related_term_by_property(ontology_id: str, term_iri: str, property_iri: str)</code>","text":"<p>Use the /ontologies/{ontology_id}/terms/{term_iri}/{property_iri} endpoint to find related terms.</p> <p>From the OLS4 docs:     In cases where a term has a direct relation to another term (single existential to a     named class in OBO), for example a \"part of\" relation, the related terms can be     accessed directly with this API.</p> <p>Example request:</p> <p>http://www.ebi.ac.uk/ols4/api/ontologies/uberon/terms/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FUBERON_0000016/http%253A%252F%252Fpurl.obolibrary.org%252Fobo%252FBFO_0000050</p>"},{"location":"client/#ols_py.client.Ols4Client.get_term","title":"<code>get_term(ontology_id: str, iri: str) -&gt; schemas.responses.Term</code>","text":"<p>Get a single term in a specific ontology</p> <p>Parameters:</p> <ul> <li> <code>ontology_id</code>               (<code>str</code>)           \u2013            <p>Ontology ID/name, e.g. \"mondo\"</p> </li> <li> <code>iri</code>               (<code>str</code>)           \u2013            <p>IRI for a single term</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Term</code>           \u2013            <p>Term details</p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.get_term_ancestors","title":"<code>get_term_ancestors(ontology_id: str, term_id: str, params: Optional[GetTermRelativesParams] = None) -&gt; schemas.responses.MultipleTerms</code>","text":"<p>Get ancestors for a term. See get_term_parents()</p>"},{"location":"client/#ols_py.client.Ols4Client.get_term_children","title":"<code>get_term_children(ontology_id: str, term_id: str, params: Optional[GetTermRelativesParams] = None) -&gt; schemas.responses.MultipleTerms</code>","text":"<p>Get children for a term. See get_term_parents()</p>"},{"location":"client/#ols_py.client.Ols4Client.get_term_descendants","title":"<code>get_term_descendants(ontology_id: str, term_id: str, params: Optional[GetTermRelativesParams] = None) -&gt; schemas.responses.MultipleTerms</code>","text":"<p>Get descendants for a term. See get_term_parents()</p>"},{"location":"client/#ols_py.client.Ols4Client.get_term_hierarchical_ancestors","title":"<code>get_term_hierarchical_ancestors(ontology_id: str, term_id: str, params: Optional[GetTermRelativesParams] = None) -&gt; schemas.responses.MultipleTerms</code>","text":"<p>Get hierarchical ancestors for a term. See get_term_parents()</p>"},{"location":"client/#ols_py.client.Ols4Client.get_term_hierarchical_descendants","title":"<code>get_term_hierarchical_descendants(ontology_id: str, term_id: str, params: Optional[GetTermRelativesParams] = None) -&gt; schemas.responses.MultipleTerms</code>","text":"<p>Get hierarchical descendants for a term. See get_term_parents()</p>"},{"location":"client/#ols_py.client.Ols4Client.get_term_hierarchical_parents","title":"<code>get_term_hierarchical_parents(ontology_id: str, term_id: str, params: Optional[GetTermRelativesParams] = None) -&gt; schemas.responses.MultipleTerms</code>","text":"<p>Get hierarchical parents for a term. See get_term_parents()</p>"},{"location":"client/#ols_py.client.Ols4Client.get_term_in_defining_ontology","title":"<code>get_term_in_defining_ontology(iri: Optional[str] = None, params: Optional[schemas.requests.TermInDefiningOntologyParams] = None) -&gt; schemas.responses.TermInDefiningOntology</code>","text":"<p>Use the /terms/findByIdAndIsDefiningOntology/ to find a term in its defining ontology. This allows you to look up a term by IRI alone.</p> <p>Parameters:</p> <ul> <li> <code>iri</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>IRI for the term. You can either provide this, or use the <code>params</code> argument (not both).</p> </li> <li> <code>params</code>               (<code>Optional[TermInDefiningOntologyParams]</code>, default:                   <code>None</code> )           \u2013            <p>GET parameters. the /findByIdAndIsDefiningOntology/ endpoint allows \"iri\", \"short_form\", \"obo_id\", or \"id\"</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>TermInDefiningOntology</code>           \u2013            <p>JSON data. Terms are at resp.embedded.terms</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>if both/neither IRI and params arguments were given.</p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.get_term_parents","title":"<code>get_term_parents(ontology_id: str, term_id: str, params: Optional[GetTermRelativesParams] = None) -&gt; schemas.responses.MultipleTerms</code>","text":"<p>Get parents for a term.</p> <p>Parameters:</p> <ul> <li> <code>ontology_id</code>               (<code>str</code>)           \u2013            <p>Name of ontology, e.g. \"go\"</p> </li> <li> <code>term_id</code>               (<code>str</code>)           \u2013            <p>Term ID (URI, short form or obo ID)</p> </li> <li> <code>params</code>               (<code>Optional[GetTermRelativesParams]</code>, default:                   <code>None</code> )           \u2013            <p>optional pagination params, page and size. Default size is 20 items</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MultipleTerms</code>           \u2013            <p>response object. the actual terms are in a list at <code>response.embedded.terms</code></p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.get_terms","title":"<code>get_terms(ontology_id: str, params: Optional[schemas.requests.GetTermsParams] = None) -&gt; schemas.responses.MultipleTerms</code>","text":"<p>Get multiple terms in a specific ontology, possibly filtering by iri, short_form or obo_id.</p> <p>Parameters:</p> <ul> <li> <code>params</code>               (<code>Optional[GetTermsParams]</code>, default:                   <code>None</code> )           \u2013            <p>Optional params. Filter by iri, short_form or obo_id, or specify the number of results with <code>page</code> and <code>size</code></p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.get_with_schema","title":"<code>get_with_schema(schema: Type[S], path: str, params: Optional[ParamsMapping] = None) -&gt; S</code>","text":"<p>Get data from <code>path</code> and parse it with <code>schema</code> to return a pydantic object.</p> <p>Parameters:</p> <ul> <li> <code>schema</code>               (<code>Type[S]</code>)           \u2013            <p>Pydantic class/model inheriting from BaseModel</p> </li> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>API path (excluding the base API url)</p> </li> <li> <code>params</code>               (<code>Optional[ParamsMapping]</code>, default:                   <code>None</code> )           \u2013            <p>Query parameters</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>S</code>           \u2013            <p>Pydantic model instance created from <code>schema</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>pydantic.ValidationError</code>             \u2013            <p>if response data fails to validate.</p> </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.search","title":"<code>search(query: str, params: Optional[schemas.requests.SearchParams] = None, add_wildcards: bool = False) -&gt; schemas.responses.SearchResponse</code>","text":"<p>Search for <code>query</code> using the /search API endpoint.</p> <p>Parameters:</p> <ul> <li> <code>query</code>               (<code>str</code>)           \u2013            <p>term(s) to search for</p> </li> <li> <code>params</code>               (<code>Optional[SearchParams]</code>, default:                   <code>None</code> )           \u2013            <p>dictionary of search parameters</p> </li> <li> <code>add_wildcards</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Add a wildcard * to each word in <code>query</code> - good for broad/flexible searches</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SearchResponse</code>           \u2013            </li> </ul>"},{"location":"client/#ols_py.client.Ols4Client.select","title":"<code>select(query: str, params: Optional[schemas.requests.SelectParams] = None, add_wildcards: bool = False) -&gt; schemas.responses.SearchResponse</code>","text":"<p>Search for <code>query</code> using the /select API endpoint, which is supposed to be tuned to return good results for autocomplete.</p> <p>Parameters:</p> <ul> <li> <code>query</code>               (<code>str</code>)           \u2013            <p>term(s) to search for</p> </li> <li> <code>params</code>               (<code>Optional[SelectParams]</code>, default:                   <code>None</code> )           \u2013            <p>dictionary of optional parameters</p> </li> <li> <code>add_wildcards</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Add a wildcard * to each word in <code>query</code> - good for broad/flexible searches</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>SearchResponse</code>           \u2013            </li> </ul>"},{"location":"schemas/","title":"Request/Response schemas","text":"<p>We validate request parameters and responses with pydantic to try and provide more certainty about the data sent and received from the OLS API. This should also mean you get useful type annotations when working with the client in your own code (you may want to install a Pydantic plugin for your IDE/editor, e.g. VS Code).</p>"},{"location":"schemas/#ols_py.schemas.requests","title":"<code>ols_py.schemas.requests</code>","text":""},{"location":"schemas/#ols_py.schemas.requests.GetTermsParams","title":"<code>GetTermsParams</code>","text":"<p>Optional arguments for get_terms() method</p>"},{"location":"schemas/#ols_py.schemas.requests.PageParams","title":"<code>PageParams</code>","text":"<p>Pagination params accepted by endpoints that return multiple resources</p>"},{"location":"schemas/#ols_py.schemas.requests.PageParams.page","title":"<code>page: Optional[NonNegativeInt] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Which page to fetch (starting at 0)</p>"},{"location":"schemas/#ols_py.schemas.requests.PageParams.size","title":"<code>size: Optional[PositiveInt] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of results per page</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams","title":"<code>SearchParams</code>","text":"<p>Optional parameters passed to search() method (not including the q/query parameter).</p> <p>NOTE: use get_query_dict() to convert this to the format needed by the GET request</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.allChildrenOf","title":"<code>allChildrenOf: NotRequired[list[str]]</code>  <code>instance-attribute</code>","text":"<p>Restrict results to children of these terms, plus other child-like relations e.g. \"part of\", \"develops from\"</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.childrenOf","title":"<code>childrenOf: NotRequired[list[str]]</code>  <code>instance-attribute</code>","text":"<p>Restrict results to children of these terms</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.exact","title":"<code>exact: NotRequired[bool]</code>  <code>instance-attribute</code>","text":"<p>Only return exact matches</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.fieldList","title":"<code>fieldList: NotRequired[list[SearchReturnFields | AnnotationFieldName]]</code>  <code>instance-attribute</code>","text":"<p>Which fields to return in the results</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.groupField","title":"<code>groupField: NotRequired[bool]</code>  <code>instance-attribute</code>","text":"<p>Group results by unique ID</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.local","title":"<code>local: NotRequired[bool]</code>  <code>instance-attribute</code>","text":"<p>Only return terms in a defining ontology</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.obsoletes","title":"<code>obsoletes: NotRequired[bool]</code>  <code>instance-attribute</code>","text":"<p>Include obsoleted terms in the results</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.ontology","title":"<code>ontology: NotRequired[str | list[str]]</code>  <code>instance-attribute</code>","text":"<p>Ontologies to search, e.g. <code>[\"mondo\", \"upheno\"]</code></p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.queryFields","title":"<code>queryFields: NotRequired[list[SearchQueryFields | AnnotationFieldName]]</code>  <code>instance-attribute</code>","text":"<p>Which fields to search over</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.rows","title":"<code>rows: NotRequired[int]</code>  <code>instance-attribute</code>","text":"<p>Number of results per page</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.start","title":"<code>start: NotRequired[int]</code>  <code>instance-attribute</code>","text":"<p>Index of first result</p>"},{"location":"schemas/#ols_py.schemas.requests.SearchParams.type","title":"<code>type: NotRequired[EntityType]</code>  <code>instance-attribute</code>","text":"<p>Type of term to search for, e.g. \"class\", \"property\"</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams","title":"<code>SelectParams</code>","text":"<p>Optional parameters passed to select() method (not including the q/query parameter).</p> <p>NOTE: use get_query_dict() to convert this to the format needed by the GET request</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.allChildrenOf","title":"<code>allChildrenOf: NotRequired[list[str]]</code>  <code>instance-attribute</code>","text":"<p>Restrict results to children of these terms, plus other child-like relations e.g. \"part of\", \"develops from\"</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.childrenOf","title":"<code>childrenOf: NotRequired[list[str]]</code>  <code>instance-attribute</code>","text":"<p>Restrict results to children of these terms</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.exact","title":"<code>exact: NotRequired[bool]</code>  <code>instance-attribute</code>","text":"<p>Only return exact matches</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.fieldList","title":"<code>fieldList: NotRequired[list[SearchReturnFields | AnnotationFieldName]]</code>  <code>instance-attribute</code>","text":"<p>Which fields to return in the results</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.groupField","title":"<code>groupField: NotRequired[bool]</code>  <code>instance-attribute</code>","text":"<p>Group results by unique ID</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.local","title":"<code>local: NotRequired[bool]</code>  <code>instance-attribute</code>","text":"<p>Only return terms in a defining ontology</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.obsoletes","title":"<code>obsoletes: NotRequired[bool]</code>  <code>instance-attribute</code>","text":"<p>Include obsoleted terms in the results</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.ontology","title":"<code>ontology: NotRequired[str | list[str]]</code>  <code>instance-attribute</code>","text":"<p>Ontologies to search, e.g. <code>[\"mondo\", \"upheno\"]</code></p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.rows","title":"<code>rows: NotRequired[int]</code>  <code>instance-attribute</code>","text":"<p>Number of results per page</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.start","title":"<code>start: NotRequired[int]</code>  <code>instance-attribute</code>","text":"<p>Index of first result</p>"},{"location":"schemas/#ols_py.schemas.requests.SelectParams.type","title":"<code>type: NotRequired[EntityType]</code>  <code>instance-attribute</code>","text":"<p>Type of term to search for, e.g. \"class\", \"property\"</p>"},{"location":"schemas/#ols_py.schemas.requests.TermInDefiningOntologyParams","title":"<code>TermInDefiningOntologyParams</code>","text":"<p>Optional arguments for get_term_in_defining_ontology() method</p>"},{"location":"schemas/#ols_py.schemas.requests.get_query_dict","title":"<code>get_query_dict(params: SearchParams | SelectParams) -&gt; dict[str, str]</code>","text":"<p>Convert SearchParams or SelectParams to the format needed in requests, converting any list values to comma-separated string, as required by the search and select endpoints</p>"},{"location":"schemas/#ols_py.schemas.responses","title":"<code>ols_py.schemas.responses</code>","text":""},{"location":"schemas/#ols_py.schemas.responses.ApiInfo","title":"<code>ApiInfo</code>","text":"<p>Response returned by the root API endpoint, links to other endpoints/resources</p>"},{"location":"schemas/#ols_py.schemas.responses.ApiInfoLinks","title":"<code>ApiInfoLinks</code>","text":"<p>Set of links returned in the root endpoint/ API ifno</p>"},{"location":"schemas/#ols_py.schemas.responses.EmbeddedTerms","title":"<code>EmbeddedTerms</code>","text":"<p>\"_embedded\" field used in responses returning terms</p>"},{"location":"schemas/#ols_py.schemas.responses.Link","title":"<code>Link</code>","text":"<p>Link item returned in responses</p>"},{"location":"schemas/#ols_py.schemas.responses.MultipleTerms","title":"<code>MultipleTerms</code>","text":"<p>Response returned for endpoints which return multiple term results, e.g. parents, ancestors, descendants etc. The actual terms are at <code>response.embedded.terms</code></p>"},{"location":"schemas/#ols_py.schemas.responses.OlsErrorSchema","title":"<code>OlsErrorSchema</code>","text":"<p>Error data returned the OLS API for a bad request/error</p>"},{"location":"schemas/#ols_py.schemas.responses.PageInfo","title":"<code>PageInfo</code>","text":"<p>Page information returned in paginated responses</p>"},{"location":"schemas/#ols_py.schemas.responses.Term","title":"<code>Term</code>","text":"<p>Response returned by term endpoints</p>"},{"location":"schemas/#ols_py.schemas.responses.TermInDefiningOntology","title":"<code>TermInDefiningOntology</code>","text":"<p>Response returned for /terms/findByIdAndIsDefiningOntology/ endpoint</p>"}]}
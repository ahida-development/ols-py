[tool.poetry]
name = "ols-py"
version = "0.6.0"
description = "Python client for the Ontology Lookup Service"
authors = [
    "Marius Mather <marius.mather@sydney.edu.au>",
]
license = "MIT"
readme = "README.md"

documentation = "https://ahida-development.github.io/ols-py"
homepage = "https://ahida-development.github.io/ols-py"
repository = "https://github.com/ahida-development/ols-py"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Typing :: Typed",
]

packages = [
    { include = "ols_py", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.10.1, <4.0"
requests = ">=2.0, <3.0"
pydantic = "^2.1.1"

[tool.poetry.group.jupyterlab]
optional = true

[tool.poetry.group.jupyterlab.dependencies]
jupyterlab = "^3.6"

[tool.poetry.group.dev.dependencies]
autoflake = "*"
black = "*"
flake8 = "*"
flake8-bugbear = "*"
flake8-builtins = "*"
flake8-comprehensions = "*"
flake8-debugger = "*"
flake8-eradicate = "*"
flake8-logging-format = "*"
isort = "*"
mkdocstrings = "*"
mkdocstrings-python = "*"
mkdocs-material = "*"
mypy = "*"
types-requests = "*"
pep8-naming = "*"
pre-commit = "*"
pymdown-extensions = "*"
pytest = "*"
pytest-xdist = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
pyupgrade = "*"
tryceratops = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
src_paths = ["src", "tests"]

[tool.black]
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'

[tool.pytest.ini_options]
addopts = """\
    --numprocesses=auto
    --cov ols_py \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 80
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
disallow_any_unimported = true
disallow_untyped_defs = false
no_implicit_optional = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
check_untyped_defs = true
show_error_codes = true
